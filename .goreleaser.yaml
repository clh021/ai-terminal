# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy

builds:
  - id: ai-cli
    main: ./cmd/cli
    env:
      - CGO_ENABLED=0
      - VERSION_PACKAGE=github.com/coding-hui/common/version
    binary: ai
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
    # List of combinations of GOOS + GOARCH + GOARM to ignore.
    ignore:
      - goos: windows
        goarch: i386
      - goos: darwin
        goarch: 386
      - goos: linux
        goarch: arm
        goarm: 7
      - goarm: mips64
      - gomips: hardfloat
      - goamd64: v4
    ldflags:
      - -s -w -X {{ .Env.VERSION_PACKAGE }}.GitVersion={{ .Version }} -X {{ .Env.VERSION_PACKAGE }}.GitCommit={{ .Commit }} -X {{ .Env.VERSION_PACKAGE }}.GitTreeState={{ .IsGitDirty }} -X {{ .Env.VERSION_PACKAGE }}.BuildDate={{ .CommitDate }}

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

changelog:
  sort: asc
  filters:
    include:
      - "^feat:"
      - "^fix:"
      - "^perf:"
      - "^refactor:"
    exclude:
      - "^docs:"
      - "^test:"
      - "^chore:"
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug Fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "Performance Improvements"
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "Code Refactoring"
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: Others
      order: 999

report_sizes: true